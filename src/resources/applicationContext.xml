<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName">
	<!-- 配置系统使用的数据源 使用JNDI 数据源配置
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/upath</value>
		</property>
	</bean> -->
	
	<!-- 内部配置数据源 -->
	<context:property-placeholder location="classpath*:config/prop/*.properties"/>
	
	<bean id="dataSource" class="com.upath.plat.common.dao.PlatBasicDataSource" destroy-method="close">      
	    <property name="driverClassName" value="${jdbc.driverClassName}" />      
	    <property name="url" value="${jdbc.url}" />      
	    <property name="username" value="${jdbc.username}" />      
	    <property name="password" value="${jdbc.password}" />
	    
	    <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="5" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="50"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="20" />
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="5" />
        <property name="maxWait">
              <value>10000</value>
        </property>
        <!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
        <property name="logAbandoned" value="true" />
        <!-- 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超时时间(以秒数为单位)300 -->
        <property name="removeAbandonedTimeout" value="180" />
        <property name="timeBetweenEvictionRunsMillis">
           <value>3600000</value><!--1 hours-->
        </property>
        <property name="testWhileIdle">
           <value>true</value>
        </property>
        <property name="validationQuery">
           <value>select 1 from dual</value>
        </property>
        
		<!-- <property name="poolPreparedStatements" value="true"/> -->
		<!-- <property name="defaultAutoCommit" value="true"/> -->
	</bean> 
	
	<!-- ORACLE 的日期格式 配置兼容  dataSource
	<property name="connectionProperties">
		<value>oracle.jdbc.V8Compatible=true</value>
	</property> -->
	
	
	<!-- 事物管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 数据连接管理器 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
	<bean id="sqlSessionFactory" class="com.upath.plat.common.dao.PackageSqlSessionFactoryBeanNew">
	  	<property name="dataSource" ref="dataSource" />
	  	<property name="configLocation" value="classpath:mybatis-config.xml" /> 
	  	<property name="typeAliasesPackage" value="com.upath.plat.auth.facade,com.upath.**.model,com.deceen.**.model"/>
	  	
	  	<!-- 显示指定Mapper 文件的位置 
	  	<property name="mapperLocations" value="classpath*:com/upath/plat/**/mapper/*Mapper.xml"/> -->
	</bean>
	
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="batchSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
  		<constructor-arg index="1" value="BATCH"/>
	</bean>
	
	
	<!-- 事务管理 配置器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" 
				no-rollback-for="java.lang.RuntimeException"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="excute*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="analy*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="batch*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	

	<!-- 系统默认使用 SIMPLE 模式的 执行器来执行SQL 但是在一些情况下面批量处理是需要的。 -->
	<bean id="dao" class="com.upath.plat.common.dao.BaseDaoSupport">
		  <!--注入SqlSessionTemplate实例 -->
		  <property name="sqlSessionTemplate" ref="sqlSession"></property> 
		  <!--也可直接注入SqlSessionFactory实例，二者都指定时，SqlSessionFactory失效
		  <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
	</bean>
	
	<!-- 在需要使用批量处理时，请使用此公用数据类 -->
	<bean id="batchDao" class="com.upath.plat.common.dao.BaseDaoSupport">
		  <property name="sqlSessionTemplate" ref="batchSqlSession"></property> 
	</bean>
	
	<!-- 测试的时候用   YYH -->
	<!-- <import resource="classpath:config/spring/mty-appctx.xml"/> -->
	  
</beans>